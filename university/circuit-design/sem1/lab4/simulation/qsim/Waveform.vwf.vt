// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2020 22:48:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          scheme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module scheme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b1;
reg b2;
reg b3;
reg C;
reg Dr;
reg NRA1;
reg NRA2;
reg NRA3;
reg NSA1;
reg NSA2;
reg NSA3;
reg v1;
reg v2;
// wires                                               
wire nq1;
wire nq2;
wire q1;
wire q2;
wire q3;

// assign statements (if any)                          
scheme i1 (
// port map - connection between master ports and signals/registers   
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.C(C),
	.Dr(Dr),
	.nq1(nq1),
	.nq2(nq2),
	.NRA1(NRA1),
	.NRA2(NRA2),
	.NRA3(NRA3),
	.NSA1(NSA1),
	.NSA2(NSA2),
	.NSA3(NSA3),
	.q1(q1),
	.q2(q2),
	.q3(q3),
	.v1(v1),
	.v2(v2)
);
initial 
begin 
#2000000 $finish;
end 

// v2
initial
begin
	v2 = 1'b0;
	v2 = #800000 1'b1;
	v2 = #800000 1'b0;
end 

// v1
initial
begin
	v1 = 1'b0;
	v1 = #400000 1'b1;
	v1 = #400000 1'b0;
	v1 = #400000 1'b1;
	v1 = #400000 1'b0;
end 

// b2
always
begin
	b2 = 1'b0;
	b2 = #200000 1'b1;
	#200000;
end 

// NSA2
initial
begin
	NSA2 = 1'b1;
	NSA2 = #100000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #125000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #125000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #125000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #125000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #125000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #125000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #125000 1'b0;
	NSA2 = #25000 1'b1;
	NSA2 = #25000 1'b0;
	NSA2 = #25000 1'b1;
end 

// NRA2
initial
begin
	NRA2 = 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #125000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #125000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #125000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #125000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #125000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #125000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #125000 1'b0;
	NRA2 = #25000 1'b1;
	NRA2 = #25000 1'b0;
	NRA2 = #25000 1'b1;
end 

// NSA3
initial
begin
	NSA3 = 1'b1;
	# 50000;
	repeat(19)
	begin
		NSA3 = 1'b0;
		NSA3 = #25000 1'b1;
		# 75000;
	end
	NSA3 = 1'b0;
	NSA3 = #25000 1'b1;
end 

// NRA3
always
begin
	NRA3 = 1'b0;
	NRA3 = #25000 1'b1;
	#75000;
end 

// C
always
begin
	C = 1'b0;
	C = #37500 1'b1;
	#12500;
end 
endmodule

