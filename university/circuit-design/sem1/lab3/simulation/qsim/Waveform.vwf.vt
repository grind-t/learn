// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2020 18:02:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          scheme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module scheme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg E1;
reg E2;
reg NRA;
reg NSA;
// wires                                               
wire NQ1;
wire NQ2;
wire Q1;
wire Q2;

// assign statements (if any)                          
scheme i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.E1(E1),
	.E2(E2),
	.NQ1(NQ1),
	.NQ2(NQ2),
	.NRA(NRA),
	.NSA(NSA),
	.Q1(Q1),
	.Q2(Q2)
);
initial 
begin 
#1000000 $finish;
end 

// C
initial
begin
	C = 1'b0;
	C = #100000 1'b1;
	C = #12500 1'b0;
	C = #37500 1'b1;
	C = #12500 1'b0;
	C = #37500 1'b1;
	C = #12500 1'b0;
	C = #37500 1'b1;
	C = #12500 1'b0;
	C = #37500 1'b1;
	C = #12500 1'b0;
	C = #37500 1'b1;
	C = #12500 1'b0;
	C = #37500 1'b1;
	C = #12500 1'b0;
	C = #37500 1'b1;
	C = #12500 1'b0;
	C = #362500 1'b1;
	# 12500;
	repeat(6)
	begin
		C = 1'b0;
		C = #12500 1'b1;
		# 12500;
	end
	C = 1'b0;
end 

// E1
initial
begin
	E1 = 1'b0;
	E1 = #50000 1'b1;
	E1 = #25000 1'b0;
	E1 = #50000 1'b1;
	E1 = #50000 1'b0;
	E1 = #50000 1'b1;
	E1 = #100000 1'b0;
	E1 = #50000 1'b1;
	E1 = #50000 1'b0;
	E1 = #50000 1'b1;
	E1 = #25000 1'b0;
end 

// E2
initial
begin
	E2 = 1'b0;
	E2 = #75000 1'b1;
	E2 = #100000 1'b0;
	E2 = #50000 1'b1;
	E2 = #50000 1'b0;
	E2 = #150000 1'b1;
	E2 = #75000 1'b0;
end 

// NSA
initial
begin
	NSA = 1'b1;
	NSA = #525000 1'b0;
	NSA = #25000 1'b1;
end 

// NRA
initial
begin
	NRA = 1'b0;
	NRA = #25000 1'b1;
	NRA = #475000 1'b0;
	NRA = #25000 1'b1;
end 
endmodule

